#
# $Revision: 1.13 $
# $Author: sderr $
# $Date: 2001/12/17 11:28:01 $
# $Header: /cvsroot/ka-tools/ka-deploy/src/Makefile,v 1.13 2001/12/17 11:28:01 sderr Exp $
# $Id: Makefile,v 1.13 2001/12/17 11:28:01 sderr Exp $
# $Log: Makefile,v $
# Revision 1.13  2001/12/17 11:28:01  sderr
# Added a -d option in ka-d-server to add a delay between the clients when we release them
#
# Revision 1.12  2001/11/14 15:41:18  sderr
# Now the last client of the chain tells the server from time to time
# what data it has, and so the server
# can make sure he will have the necessary data in case of failure
# (that is all the report_pos) stuff
# -still only for the chain
# -if we lose the last client, transfer stops (should be easy to fix)
#
# Revision 1.11  2001/11/14 10:34:56  sderr
# Many many changes.
# -silly authentication done by client/server communication on data connections
# -it was needed for this : recovery when one client fails. It takes a lot of changes
# This seems to work, but :
# 	* error detection : well, it's ok when I kill -INT a client, that's all
# 	* sometimes the node re-contacted does not have the data the re-contacting node needs -- needs to be fixed
# 	* works only in the arity = 1 case.
#
# Revision 1.10  2001/11/09 10:15:30  sderr
# Some cleanups, mostly in client.c
# Moved the data_buffer stuff to buffer.c and buffer.h so I'll be able to use it on the server also
# Added the new struct consumer
#
# Revision 1.9  2001/08/29 06:36:13  mikmak
# correcting missing option
#
# Revision 1.8  2001/08/17 15:02:51  mikmak
# dynamic send window in rmtplib
#
# Revision 1.7  2001/08/13 13:54:43  mikmak
# removed the stupid dot and slow down the while(1)
#
# Revision 1.6  2001/07/02 11:39:13  sderr
# Moved things so that:
# 	-multicast support is optional (check Makefile)
# 	-.c files again can be compiled using gcc, not g++ (added multicast_server.cpp and multicast_client.cpp)
# Cleaned transport_mode variable
#
# Revision 1.5  2001/07/01 15:27:18  mikmak
# multicast is now integrated and working. Many updates to rmtplib and optimization for Ka.Still much to do ...
#
# Revision 1.4  2001/05/30 14:35:51  sderr
# Added udp support, clients now can find the server by sending UDP broadcasts
#
# Revision 1.3  2001/05/03 12:34:41  sderr
# Added CVS Keywords to most files. Mostly useless.
#
# $State: Exp $


# shoud we add support for multicast ?
MCAST = no

SOBJCORE = server.o udp.o
COBJCORE = client.o udp.o
CFLAGSCORE = -O -Wall -Werror -m32

ifeq ($(MCAST),yes)
  CFLAGS = $(CFLAGSCORE) -DUSE_RMTP_LIB
  SOBJ = multicast_server.o  ../rmtplib/.libs/libRMTP.so.1.0.0 $(SOBJCORE)
  COBJ = multicast_client.o  ../rmtplib/.libs/libRMTP.so.1.0.0 $(COBJCORE)
else
  CFLAGS = $(CFLAGSCORE)
  SOBJ = $(SOBJCORE) buffer.o delay.o
  COBJ = $(COBJCORE) buffer.o
endif


all:ka-d-server ka-d-client 

# server
server.o:server.c tree.h packet.h udp.h
	gcc $(CFLAGS) -c server.c -o server.o


# client
client.o:client.c tree.h packet.h udp.h
	gcc $(CFLAGS) -c client.c -o client.o


udp.o:udp.c packet.h udp.h 
	gcc $(CFLAGS) -c udp.c -o udp.o

delay.o:delay.c server.h 
	gcc $(CFLAGS) -c delay.c -o delay.o -Wall -Werror

buffer.o:buffer.c packet.h buffer.h 
	gcc $(CFLAGS) -c buffer.c -o buffer.o -Wall -Werror




ifeq ($(MCAST),yes)
multicast_server.o: multicast_server.cpp
	g++ $(CFLAGS) -c multicast_server.cpp -o multicast_server.o

multicast_client.o: multicast_client.cpp
	g++ $(CFLAGS) -c multicast_client.cpp -o multicast_client.o
endif


ka-d-server: $(SOBJ)
	gcc $(CFLAGS) -static $(SOBJ) -o ka-d-server

# client
ka-d-client: $(COBJ)
	gcc $(CFLAGS) -static $(COBJ) -o ka-d-client


clean:
	rm -f ka-d-server ka-d-client *.o
	
#copy the file on the NFS_ROOT mini-system
copy:
	sudo cp client /tftpboot/NFSROOT 
